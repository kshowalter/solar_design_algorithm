var settings_constants = require('./settings/settings_constants.js');
var tables = require('./tables.js');
var f = require('./functions/functions.js');
var math = require('mathjs');
var sf = require('spreadsheet_functions');

var PI = function(){
  return math.pi;
};

var lookup = function(search_key, table, col, reverse, allow_exact){
  if( col === undefined ){ col = 1; }
  if( reverse === undefined ){ reverse = false; }
  if( allow_exact === undefined ){ allow_exact = false; }
  var key_last_match;

  if( isNaN(search_key) ){ // search_key is string, not a number
    if( table[search_key] !== undefined ){
      key_last_match = search_key;
    } else {
      return false;
    }
  } else { // else is number
    var search_value = Number(search_key);
    key_last_match = Object.keys(table)[0];
    for( var key in table){
      var key_number = Number(key);
      if( (key_number === search_value) && (reverse == allow_exact) ){ // Exact match
      //if( key_number === search_value ){ // Exact match
        key_last_match = key;
        break;
      } else if( search_value > key_number && !reverse ){ // Possible match, but we might find a closer one.
        key_last_match = key;
      } else if( search_value < key_number && reverse ){ // Possible match, but we might find a closer one.
        key_last_match = key;
        break;
      }
    }
  }
  var return_value;
  if( col === 0 ){
    return_value = key_last_match;
  } else {
    return_value = table[key_last_match][col-1];
  }

  if( ! isNaN(return_value) ){
    return_value = Number(return_value);
  }

  return return_value;
};

var calculate_system = function(system_settings){
  var notes = system_settings.state.notes;

  var array = system_settings.state.system.array;
  var module = system_settings.state.system.module;
  var source = system_settings.state.system.source;
  var system = system_settings.state.system.module;
  var inverter = system_settings.state.system.inverter;
  var interconnection = system_settings.state.system.interconnection;
  var circuits = system_settings.state.system.circuits;

  var error_check = {};

  var report_error = function(error_message){
    notes.errors.push(error_message);
  };


  ///////////////////
  // data fixes

  array.circuits_per_MPPT = array.circuits_per_MPPT || 1;
  inverter.tranformerless = true;

  var max_modules = array.largest_string * (array.num_of_strings-1) + array.smallest_string;
  var min_modules = array.smallest_string * (array.num_of_strings-1) + array.largest_string;
  if( array.num_of_modules > max_modules ){
    notes.warnings.push('Module total exceeds the number possible with selected string sizes. Using max number of modules.');
    array.num_of_modules = max_modules;
  }
  if( array.num_of_modules < min_modules ){
    notes.warnings.push('Module total is less than the number possible with selected string sizes.');
    array.num_of_modules = min_modules;
  }

  if( array.num_of_strings === 1 && ( array.smallest_string !== array.largest_string ) ){
    notes.warnings.push('For a single string system, smallest and largest string should be the same. Using largest string size.');
    array.smallest_string = array.largest_string;
  }

  ///////////////////////////////////////////
  /// calculations from standard document ///
  ///////////////////////////////////////////
